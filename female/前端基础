- **DOM 和 BOM**
    + **D**ocument **O**bject **M**odel 文档对象模型，就是把【文档】当做一个【对象】来看待。--document 对象
        + 各个组件（component）可以通过object.attribute访问
        + 一个DOM有一个根对象，这个对象通常是document
    + **B**rower **O**bject **M**odel 浏览器对象模型，就是把【浏览器】当做一个【对象】来看待。--window 对象
        + BOM除了可以访问文档中的组件之外，还可以访问浏览器组件，比如 navigator（导航条）、history（历史记录）等等
- **输入URL 浏览器都发生了什么**
    + 完善前端知识体系: <https://segmentfault.com/a/1190000013662126>
- **重排与重绘**
    + 重绘（repaint或redraw）：当盒子的位置、大小以及其他属性，例如颜色、字体大小等都确定下来之后，浏览器便把这些原色都按照各自的特性绘制一遍，将内容呈现在页面上。重绘是指一个元素外观的改变所触发的浏览器行为，浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。
触发重绘的条件：改变元素外观属性。如：color，background-color等。
    + 重排（重构/回流/reflow）：当渲染树中的一部分(或全部)因为元素的规模尺寸，布局，隐藏等改变而需要重新构建, 这就称为回流(reflow)。每个页面至少需要一次回流，就是在页面第一次加载的时候。
    + 重绘和重排的关系：在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分渲染树，完成回流后，浏览器会重新绘制受影响的部分到屏幕中，该过程称为重绘。
- **CSS动画 JS动画**
    + css实现动画：animation transition transform 
    + js实现动画: setInterval setTimeout requestAnimationFrame
    + JS动画
        + JS动画控制能力强，可以再动画播放过程中对动画进行控制：开始、暂停、回放、终止、取消
        + 动画效果比css3丰富，比如曲线运动，冲击闪烁，视差滚动效果
        + css3剧透兼容问题，JS大多没有兼容问题
        + JS在浏览器的主线程中运行，而主线程中还会有其他运行的js脚本、样式计算、布局、绘制任务等，对于其干扰线程可能会出现阻塞，从而造成丢帧的情况
        + 代码复杂度高于CSS动画
        + **总结** : 如果动画只是简单的状态切换，不需要中间过程的控制，在这种情况下，css动画是优选方案。它会把动画逻辑放在样式文件里，而不后悔让你的页面充斥js库。而如果涉及很复杂的富客户端界面或者开发一个有着复杂UI状态的APP，那么要是用js动画。
    + css动画
        + 集中所有DOM，一次重绘重排，刷新频率和浏览器刷新频率相同
        + 代码简单，方便调优
        + 不可见元素不参与重排，节约CPU
        + 可以使用硬件加速GPU(translateZ(0))
        + 对过程无法把控，无进度报告，无回调函数，代码冗长
    + css动画和js动画的差异
        + 代码复杂度， js动画代码相对复杂一些
        + 动画运行时，对动画的控制程度上， css不能添加事件，js可以
        + 动画性能上，js动画多了一个js解析过程，性能不如css动画好
- 事件冒泡
    + 当一个元素收到事件(仅仅指事件event)的时候 会把他接收到的事件传给自己的父级，一直到window。
    + 取消事件冒泡的两种方式： 
        - 标准的W3C 方式：e.stopPropagation();这里的stopPropagation是标准的事件对象的一个方法，调用即可 
        - 非标准的IE方式:ev.cancelBubble=true;  这里的cancelBubble是 IE事件对象的属性，设为true就可以了